import haxe.DynamicAccess;
import sys.FileSystem.*;
import sys.io.File;
using StringTools;

/**
  Packages all the generated .cs files in one or multiple Build.cs / Target.cs files
  so they can be added to the build tool assembly.
  This function is executed in macro context (--macro Package.main ... ) (see build.hxml)
 **/
class Package
{
  public static function main(srcDir:String, mappedFiles:DynamicAccess<String>)
  {
    var firstKey = mappedFiles.keys()[0];
    if (firstKey == null) throw 'Mapped files cannot be empty';
    var first = mappedFiles[firstKey];
    var dst = File.write(first);
    dst.writeString('// Generated by Haxe\n');
    var hasCopied = false;

    function recurse(path:String, pack:String)
    {
      for (file in readDirectory(path))
      {
        var p2 = '$path/$file';
        if (isDirectory(p2))
        {
          recurse(p2, path + file + '.');
        } else if (p2.endsWith('.cs')) {
          var name = pack + file.substr(0,-3);
          if (name != firstKey && mappedFiles.exists(name))
          {
            File.copy(p2, mappedFiles[name]);
          } else {
            var file = File.read(p2, false);
            try
            {
              var ln1 = file.readLine(); // generated by haxe
              var ln2 = file.readLine().trim();
              if (ln2.startsWith('using')) // -D no-root
              {
                if (!hasCopied)
                {
                  dst.writeString(ln2 + '\n');
                  hasCopied = true;
                }
              } else {
                dst.writeString(ln2);
                dst.writeString('\n');
              }
              var allContent = file.readAll();
              dst.writeBytes(allContent, 0, allContent.length);
            }
            catch(e:haxe.io.Eof) {}
          }
        }
      }
    }

    recurse(srcDir, '');
    dst.close();
  }
}
