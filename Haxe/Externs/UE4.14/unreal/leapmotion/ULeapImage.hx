/**
   * 
   * WARNING! This file was autogenerated by: 
   *  _   _ _____     ___   _   _ __   __ 
   * | | | |  ___|   /   | | | | |\ \ / / 
   * | | | | |__    / /| | | |_| | \ V /  
   * | | | |  __|  / /_| | |  _  | /   \  
   * | |_| | |___  \___  | | | | |/ /^\ \ 
   *  \___/\____/      |_/ \_| |_/\/   \/ 
   * 
   * This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
   * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.leapmotion;


/**
  The Image class represents a single image from one of the Leap Motion cameras.
  You can obtain the images from your frame object or from listening to raw image events in LeapEventInterface
  
  Leap API reference: https://developer.leapmotion.com/documentation/cpp/api/Leap.Image.html
**/
@:glueCppIncludes("LeapImage.h")
@:uextern extern class ULeapImage extends unreal.UObject {
  
  /**
    Returns a UTexture2D reference that contains the latest raw Leap Image data in
    UE format. This can be optionally gamma corrected.
    
    @return Image in converted UTexture2D format
  **/
  @:final public function Texture() : unreal.UTexture2D;
  
  /**
    Faster raw distortion (R=U, G=V), requires channel conversion, 32bit float per
    channel texture will look odd if rendered raw.
    
    @return 128bit Distortion in raw UTexture2D format
  **/
  @:final public function Distortion() : unreal.UTexture2D;
  
  /**
    Visually correct distortion in UE format (R=U, G=1-V) at the cost of additional
    CPU time (roughly 1ms) in 8bit per channel format
    
    @return Distortion in converted UTexture2D format
  **/
  @:final public function DistortionUE() : unreal.UTexture2D;
  
  /**
    The image width.
  **/
  public var Width : unreal.Int32;
  
  /**
    Whether this image should apply gamma correction when fetching the texture.
  **/
  public var UseGammaCorrection : Bool;
  
  /**
    The vertical ray scale factor.
  **/
  public var RayScaleY : unreal.Float32;
  
  /**
    The horizontal ray scale factor.
  **/
  public var RayScaleX : unreal.Float32;
  
  /**
    The vertical ray offset.
  **/
  public var RayOffsetY : unreal.Float32;
  
  /**
    The horizontal ray offset.
  **/
  public var RayOffsetX : unreal.Float32;
  
  /**
    Reports whether this Image instance contains valid data.
  **/
  public var IsValid : Bool;
  
  /**
    The image ID. Images with ID of 0 are from the left camera;
    those with an ID of 1 are from the right camera (with the device in its standard operating
    position with the green LED facing the operator).
  **/
  public var Id : unreal.Int32;
  
  /**
    The image height.
  **/
  public var Height : unreal.Int32;
  
  /**
    The stride of the distortion map.
  **/
  public var DistortionWidth : unreal.Int32;
  
  /**
    The distortion map height.
  **/
  public var DistortionHeight : unreal.Int32;
  
  /**
    Provides the corrected camera ray intercepting the specified point on the image.
  **/
  @:thisConst @:final public function Rectify(uv : unreal.FVector) : unreal.FVector;
  
  /**
    Provides the point in the image corresponding to a ray projecting from the camera.
    Given a ray projected from the camera in the specified direction, warp() corrects
    for camera distortion and returns the corresponding pixel coordinates in the image.
    The ray direction is specified in relationship to the camera. The first vector element
    corresponds to the ?horizontal? view angle; the second corresponds to the ?vertical?
    view angle.
    
    @param        XY      A Vector containing the ray direction.
    @return       A Vector containing the pixel coordinates [x, y, 0] (with z always zero).
  **/
  @:thisConst @:final public function Warp(XY : unreal.FVector) : unreal.FVector;
  
}
