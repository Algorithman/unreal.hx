/**
   * 
   * WARNING! This file was autogenerated by: 
   *  _   _ _____     ___   _   _ __   __ 
   * | | | |  ___|   /   | | | | |\ \ / / 
   * | | | | |__    / /| | | |_| | \ V /  
   * | | | |  __|  / /_| | |  _  | /   \  
   * | |_| | |___  \___  | | | | |/ /^\ \ 
   *  \___/\____/      |_/ \_| |_/\/   \/ 
   * 
   * This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
   * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.leapmotion;


/**
  The InteractionBox class represents a box-shaped region completely within the
  field of view of the Leap Motion controller. The interaction box is an axis-aligned
  rectangular prism and provides normalized coordinates for hands, fingers, and tools
  within this box.
  
  The InteractionBox class can make it easier to map positions in the Leap Motion coordinate
  system to 2D or 3D coordinate systems used for application drawing.
  
  Leap API reference: https://developer.leapmotion.com/documentation/cpp/api/Leap.InteractionBox.html
**/
@:glueCppIncludes("LeapInteractionBox.h")
@:uextern extern class ULeapInteractionBox extends unreal.UObject {
  
  /**
    The width of the InteractionBox in centimeters, measured along the y-axis.
  **/
  public var Width : unreal.Float32;
  
  /**
    Reports whether this is a valid InteractionBox object.
  **/
  public var IsValid : Bool;
  
  /**
    The height of the InteractionBox in centimeters, measured along the z-axis.
  **/
  public var Height : unreal.Float32;
  
  /**
    The depth of the InteractionBox in centimeters, measured along the x-axis.
  **/
  public var Depth : unreal.Float32;
  
  /**
    The center of the InteractionBox in device coordinates (centimeters).
  **/
  public var Center : unreal.FVector;
  
  /**
    Converts a position defined by normalized InteractionBox coordinates into
    device coordinates in centimeters.
  **/
  @:thisConst @:final public function DenormalizePoint(Position : unreal.FVector) : unreal.FVector;
  
  /**
    Normalizes the coordinates of a point using the interaction box.
    
    @param        Position        The input position in device coordinates.
    @param        Clamp           Whether or not to limit the output value to the range [0,1] when the input position is outside the InteractionBox. Defaults to true.
    @return       The normalized position.
  **/
  @:thisConst @:final public function NormalizePoint(Position : unreal.FVector, Clamp : Bool) : unreal.FVector;
  
}
