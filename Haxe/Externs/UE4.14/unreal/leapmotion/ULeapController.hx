/**
   * 
   * WARNING! This file was autogenerated by: 
   *  _   _ _____     ___   _   _ __   __ 
   * | | | |  ___|   /   | | | | |\ \ / / 
   * | | | | |__    / /| | | |_| | \ V /  
   * | | | |  __|  / /_| | |  _  | /   \  
   * | |_| | |___  \___  | | | | |/ /^\ \ 
   *  \___/\____/      |_/ \_| |_/\/   \/ 
   * 
   * This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
   * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.leapmotion;


/**
  Leap Controller class wrapped into an Actor Component.
  
  The Controller class is your main interface to the Leap Motion Controller.
  Create an instance of this Controller class to access frames of tracking data
  and configuration information. Frame data can be polled at any time using the
  Frame() function. Call Frame() or Frame(0) to get the most recent
  frame. Set the history parameter to a positive integer to access previous frames.
  A controller stores up to 60 frames in its frame history.
  
  Leap API reference: https://developer.leapmotion.com/documentation/cpp/api/Leap.Controller.html
**/
@:glueCppIncludes("LeapController.h")
@:uextern extern class ULeapController extends unreal.UActorComponent {
  
  /**
    Reports whether this Controller is connected to the Leap Motion service and the Leap Motion hardware is plugged in.
  **/
  @:thisConst @:final public function IsConnected() : Bool;
  
  /**
    Returns a frame of tracking data from the Leap Motion software.
    Call frame() or frame(0) to access the most recent frame; call frame(1)
    to access the previous frame, and so on. If you use a history value greater
    than the number of stored frames, then the controller returns an invalid frame.
    
    @param optional history parameter to specify which frame to retrieve.
    @return The specified frame; or, if no history parameter is specified, the newest frame. If a frame is not available at the specified history position, an invalid Frame is returned.
  **/
  @:final public function Frame(History : unreal.Int32) : unreal.leapmotion.ULeapFrame;
  
  /**
    Reports whether this application is the focused, foreground application.
    
    @return True, if application has focus; false otherwise.
  **/
  @:thisConst @:final public function HasFocus() : Bool;
  
  /**
    Reports whether this Controller is connected to the Leap Motion service and the Leap Motion hardware is plugged in.
    
    @return True, if connected; false otherwise.
  **/
  @:thisConst @:final public function IsServiceConnected() : Bool;
  
  /**
    Set Flags and tracking for the plugin to use tracking expecting leap mounted on HMD.
    Optionally auto-rotate and auto-shift values by the movement of the hmd (useful pre-4.11)
  **/
  @:final public function OptimizeForHMD(UseTopdown : Bool, AutoRotate : Bool, AutoShift : Bool) : Void;
  
  /**
    Enable image streaming by the leap motion. Optionally emit raw image events and adjust images by standard gamma correction.
    
    @param AllowImages enable image support at minimum for polling
    @param EmitImageEvents whether to emit raw image event whenever they're ready
    @param UseGammaCorrection true if you wish to use image gamma correction
  **/
  @:final public function EnableImageSupport(AllowImages : Bool, EmitImageEvents : Bool, UseGammaCorrection : Bool) : Void;
  
  /**
    Requests that your application receives frames when it is not the foreground application for user input.
    
    @param TrackInBackground toggle to enable or disable
  **/
  @:final public function EnableBackgroundTracking(TrackInBackground : Bool) : Void;
  
  /**
    Enables or disables reporting of a specified gesture type.
    
    @param GestureType category of gesture you wish to enable or disable
    @param Enable whether the gesture detection should be enabled
  **/
  @:final public function EnableGesture(GestureType : unreal.leapmotion.LeapGestureType, Enable : Bool) : Void;
  
  /**
    Specify a custom leap to eye offset. Given in UE coordinate system (XForward).
    
    @param Offset offset vector, defaults to DK2 value (8cm forward)
  **/
  @:final public function SetLeapMountToHMDOffset(Offset : unreal.FVector) : Void;
  
  /**
    Leap Event Interface forwarding, automatically set since 0.6.2, available for event redirection
  **/
  @:final public function SetInterfaceDelegate(NewDelegate : unreal.UObject) : Void;
  
}
