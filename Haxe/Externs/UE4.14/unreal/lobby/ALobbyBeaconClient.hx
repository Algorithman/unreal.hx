/**
   * 
   * WARNING! This file was autogenerated by: 
   *  _   _ _____     ___   _   _ __   __ 
   * | | | |  ___|   /   | | | | |\ \ / / 
   * | | | | |__    / /| | | |_| | \ V /  
   * | | | |  __|  / /_| | |  _  | /   \  
   * | |_| | |___  \___  | | | | |/ /^\ \ 
   *  \___/\____/      |_/ \_| |_/\/   \/ 
   * 
   * This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
   * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.lobby;


/**
  A beacon client used for quality timings to a specified session
**/
@:glueCppIncludes("LobbyBeaconClient.h")
@:uextern extern class ALobbyBeaconClient extends unreal.onlinesubsystemutils.AOnlineBeaconClient {
  
  /**
    Player state associated with this beacon (@todo not splitscreen safe)
  **/
  public var PlayerState : unreal.lobby.ALobbyBeaconPlayerState;
  
  /**
    Client view of the lobby state
  **/
  public var LobbyState : unreal.lobby.ALobbyBeaconState;
  
  /**
    Tell the client to join the game
  **/
  public function ClientJoinGame() : Void;
  
  /**
    Send updated session settings to client
  **/
  public function ClientSetInviteFlags(Settings : unreal.Const<unreal.PRef<unreal.FJoinabilitySettings>>) : Void;
  
  /**
    Run a cheat command on the server
  **/
  public function ServerCheat(Msg : unreal.FString) : Void;
  
  /**
    Attempt to login a single local player with the lobby beacon
    
    @param InSessionId session id that the client is expecting to connect with
    @param InUniqueId unique id of the new player
    @param UrlString URL containing player options (name, etc)
  **/
  private function ServerLoginPlayer(InSessionId : unreal.FString, InUniqueId : unreal.Const<unreal.PRef<unreal.FUniqueNetIdRepl>>, UrlString : unreal.FString) : Void;
  
  /**
    Make a graceful disconnect with the server
  **/
  private function ServerDisconnectFromLobby() : Void;
  
  /**
    Make a graceful request to actually join the server
  **/
  private function ServerNotifyJoiningServer() : Void;
  private function ClientAckJoiningServer() : Void;
  
  /**
    Make a request to set the party owner for the given player
    
    @param InUniqueId id of the requesting player
    @param PartyOwnerUniqueId id the party owner
  **/
  private function ServerSetPartyOwner(InUniqueId : unreal.Const<unreal.PRef<unreal.FUniqueNetIdRepl>>, InPartyOwnerId : unreal.Const<unreal.PRef<unreal.FUniqueNetIdRepl>>) : Void;
  
  /**
    Client notification result for a single login attempt
    
    @param InUniqueId id of player involved
    @param bWasSuccessful result of the login attempt
  **/
  private function ClientLoginComplete(InUniqueId : unreal.Const<unreal.PRef<unreal.FUniqueNetIdRepl>>, bWasSuccessful : Bool) : Void;
  
  /**
    Client notification that another player has left the lobby
    
    @param InUniqueId unique id of new player
  **/
  private function ClientPlayerLeft(InUniqueId : unreal.Const<unreal.PRef<unreal.FUniqueNetIdRepl>>) : Void;
  
}
