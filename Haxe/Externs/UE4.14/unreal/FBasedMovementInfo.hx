/**
   * 
   * WARNING! This file was autogenerated by: 
   *  _   _ _____     ___   _   _ __   __ 
   * | | | |  ___|   /   | | | | |\ \ / / 
   * | | | | |__    / /| | | |_| | \ V /  
   * | | | |  __|  / /_| | |  _  | /   \  
   * | |_| | |___  \___  | | | | |/ /^\ \ 
   *  \___/\____/      |_/ \_| |_/\/   \/ 
   * 
   * This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
   * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;


/**
  WARNING: This type is defined as NoExport by UHT. It will be empty because of it
  
  Struct to hold information about the "base" object the character is standing on.
**/
@:glueCppIncludes("GameFramework/Character.h")
@:noCopy @:noEquals @:uextern @:ustruct extern class FBasedMovementInfo {
  
  /**
    Whether there is a velocity on the server. Used for forcing replication when velocity goes to zero.
  **/
  @:uproperty public var bServerHasVelocity : Bool;
  
  /**
    Whether rotation is relative to the base or absolute. It can only be relative if location is also relative.
  **/
  @:uproperty public var bRelativeRotation : Bool;
  
  /**
    Whether the server says that there is a base. On clients, the component may not have resolved yet.
  **/
  @:uproperty public var bServerHasBaseComponent : Bool;
  
  /**
    Rotation: relative to MovementBase if HasRelativeRotation() is true, absolute otherwise.
  **/
  @:uproperty public var Rotation : unreal.FRotator;
  
  /**
    Location relative to MovementBase. Only valid if HasRelativeLocation() is true.
  **/
  @:uproperty public var Location : unreal.FVector_NetQuantize100;
  
  /**
    Bone name on component, for skeletal meshes. NAME_None if not a skeletal mesh or if bone is invalid.
  **/
  @:uproperty public var BoneName : unreal.FName;
  
  /**
    Component we are based on
  **/
  @:uproperty public var MovementBase : unreal.UPrimitiveComponent;
  
}
