/**
   * 
   * WARNING! This file was autogenerated by: 
   *  _   _ _____     ___   _   _ __   __ 
   * | | | |  ___|   /   | | | | |\ \ / / 
   * | | | | |__    / /| | | |_| | \ V /  
   * | | | |  __|  / /_| | |  _  | /   \  
   * | |_| | |___  \___  | | | | |/ /^\ \ 
   *  \___/\____/      |_/ \_| |_/\/   \/ 
   * 
   * This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
   * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

@:glueCppIncludes("Engine/TwitterIntegrationBase.h")
@:uextern extern class UTwitterIntegrationBase extends unreal.UPlatformInterfaceBase {
  
  /**
    Perform any needed initialization
  **/
  public function Init() : Void;
  
  /**
    @return true if the user is allowed to use the Tweet UI
  **/
  public function CanShowTweetUI() : Bool;
  
  /**
    Kicks off a tweet, using the platform to show the UI. If this returns false, or you are on a platform that doesn't support the UI,
    you can use the TwitterRequest method to perform a manual tweet using the Twitter API
    
    @param InitialMessage [optional] Initial message to show
    @param URL [optional] URL to attach to the tweet
    @param Picture [optional] Name of a picture (stored locally, platform subclass will do the searching for it) to add to the tweet
    
    @return true if a UI was displayed for the user to interact with, and a TID_TweetUIComplete will be sent
  **/
  public function ShowTweetUI(InitialMessage : unreal.FString, URL : unreal.FString, Picture : unreal.FString) : Bool;
  
  /**
    Starts the process of authorizing the local user(s). When TID_AuthorizeComplete is called, then GetNumAccounts()
    will return a valid number of accounts
    
    @return true if the authorization process started, and TID_AuthorizeComplete delegates will be called
  **/
  public function AuthorizeAccounts() : Bool;
  
  /**
    @return The number of accounts that were authorized
  **/
  public function GetNumAccounts() : unreal.Int32;
  
  /**
    @return the display name of the given Twitter account
  **/
  public function GetAccountName(AccountIndex : unreal.Int32) : unreal.FString;
  
  /**
    Kicks off a generic twitter request
    
    @param URL The URL for the twitter request
    @param KeysAndValues The extra parameters to pass to the request (request specific). Separate keys and values: < "key1", "value1", "key2", "value2" >
    @param Method The method for this request (get, post, delete)
    @param AccountIndex A user index if an account is needed, or -1 if an account isn't needed for the request
    
    @return true the request was sent off, and a TID_RequestComplete
  **/
  public function TwitterRequest(URL : unreal.FString, ParamKeysAndValues : unreal.Const<unreal.PRef<unreal.TArray<unreal.FString>>>, RequestMethod : unreal.ETwitterRequestMethod, AccountIndex : unreal.Int32) : Bool;
  
}
