/**
   * 
   * WARNING! This file was autogenerated by: 
   *  _   _ _____     ___   _   _ __   __ 
   * | | | |  ___|   /   | | | | |\ \ / / 
   * | | | | |__    / /| | | |_| | \ V /  
   * | | | |  __|  / /_| | |  _  | /   \  
   * | |_| | |___  \___  | | | | |/ /^\ \ 
   *  \___/\____/      |_/ \_| |_/\/   \/ 
   * 
   * This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
   * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

@:glueCppIncludes("Sound/SoundConcurrency.h")
@:uextern extern class FSoundConcurrencySettings {
  
  /**
    The amount of attenuation to apply to older voice instances in this concurrency group. This reduces volume of older voices in a concurrency group as new voices play.
    
    AppliedVolumeScale = Math.Pow(DuckingScale, VoiceGeneration)
  **/
  public var VolumeScale : unreal.Float32;
  
  /**
    Which concurrency resolution policy to use if max voice count is reached.
  **/
  public var ResolutionRule : unreal.EMaxConcurrentResolutionRule;
  
  /**
    Whether or not to limit the concurrency to per sound owner (i.e. the actor that plays the sound). If the sound doesn't have an owner, it falls back to global concurrency.
  **/
  public var bLimitToOwner : Bool;
  
  /**
    The max number of allowable concurrent active voices for voices playing in this concurrency group.
  **/
  public var MaxCount : unreal.Int32;
  
}
