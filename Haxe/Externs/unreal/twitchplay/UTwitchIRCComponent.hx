/**
   * 
   * WARNING! This file was autogenerated by: 
   *  _   _ _____     ___   _   _ __   __ 
   * | | | |  ___|   /   | | | | |\ \ / / 
   * | | | | |__    / /| | | |_| | \ V /  
   * | | | |  __|  / /_| | |  _  | /   \  
   * | |_| | |___  \___  | | | | |/ /^\ \ 
   *  \___/\____/      |_/ \_| |_/\/   \/ 
   * 
   * This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
   * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.twitchplay;


/**
  Makes communication with Twitch IRC possible through UE4 sockets.
  You can send and receive messages to/from channel chat.
  Subscribe to OnMessageReceived to know when a message has harrived.
  Remember to first Connect(), SetUserInfo() and then AuthenticateTwitchIRC() before trying to send messages.
**/
@:glueCppIncludes("Components/TwitchIRCComponent.h")
@:uextern extern class UTwitchIRCComponent extends unreal.UActorComponent {
  
  /**
    Filter to only messages sent by the users? This avoids receiving server messages.
  **/
  public var filter_user_only_ : Bool;
  
  /**
    Channel to join upon successful connection
  **/
  public var channel_ : unreal.FString;
  
  /**
    Username. Must be in lowercaps
  **/
  public var username_ : unreal.FString;
  
  /**
    Authentication token. Need to get it from official Twitch API
  **/
  public var oath_token_ : unreal.FString;
  
  /**
    Sets up the user info for the connection.
    
    @param _oath - Oath token to use. Get one from official Twitch APIs.
    @param _username - Username to login with. All low caps.
    @param _channel - The channel to join upon connection.
  **/
  @:final public function SetUserInfo(_oath : unreal.Const<unreal.FString>, _username : unreal.Const<unreal.FString>) : Void;
  
  /**
    Send a message on the connected socket
    
    @param _b_send_to - Whether this message should be sent to a specific channel/user
    @param _channel - The channel (or user) to send this message to
    
    @return Whether the message was sent correctly
  **/
  @:final public function SendIRCMessage(_message : unreal.FString, _b_send_to : Bool, _channel : unreal.FString) : Bool;
  
  /**
    Creates a socket and tries to connect to Twitch IRC server.
    Does NOT authenticate the user.
    TODO: It internally creates a timer to handle receiving of messages. Might move to a threaded solution later or.
    
    @param _out_error - The type of error that prevented the authentication.
    
    @return Whether the connection was created.
  **/
  @:final public function Connect(_out_error : unreal.PRef<unreal.FString>) : Bool;
  
  /**
    Disconnects from the Twitch IRC server.
    
    @param _out_error - The type of error that prevented the disconnect
    
    @return Whether the socket was disconnected
  **/
  @:final public function Disconnect(_out_error : unreal.PRef<unreal.FString>) : Bool;
  
  /**
    Authenticates the connection to Twitch IRC servers.
    Also joins the channel if any was specified inside the component.
    
    @param _out_error - The type of error that prevented the authentication.
    
    @return Whether authentication succedeed or not.
  **/
  @:final public function AuthenticateTwitchIRC(_out_error : unreal.PRef<unreal.FString>) : Bool;
  
  /**
    Joins the named channel (don't include the leading #).
    If the user is in a channel, leaves that channel first.
    
    @param _new_channel - The channel to join
    @param _out_error - The type of error that prevented the join
    
    @return Whether joining succedeed or not.
  **/
  @:final public function JoinChannel(_new_channel : unreal.FString, _out_error : unreal.PRef<unreal.FString>) : Bool;
  
  /**
    Leaves the current channel, if any.
  **/
  @:final public function LeaveChannel() : Void;
  
  /**
    Is the component currently connected to Twitch?
  **/
  @:final public function IsConnected() : Bool;
  
  /**
    Has a user been authenticated?
  **/
  @:final public function IsAuthenticated() : Bool;
  
  /**
    Is the component joined to a channel?
  **/
  @:final public function IsInChannel() : Bool;
  
}
