/**
   * 
   * WARNING! This file was autogenerated by: 
   *  _   _ _____     ___   _   _ __   __ 
   * | | | |  ___|   /   | | | | |\ \ / / 
   * | | | | |__    / /| | | |_| | \ V /  
   * | | | |  __|  / /_| | |  _  | /   \  
   * | |_| | |___  \___  | | | | |/ /^\ \ 
   *  \___/\____/      |_/ \_| |_/\/   \/ 
   * 
   * This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
   * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.mediaassets;


/**
  Implements a media player asset that can play movies and other media.
  
  This class is represents a media URL along with a corresponding media player
  for exposing media playback functionality to the Engine and to Blueprints.
**/
@:umodule("MediaAssets")
@:glueCppIncludes("MediaPlayer.h")
@:uextern extern class UMediaPlayer extends unreal.UObject {
  
  /**
    Checks whether media playback can be paused right now.
    
    Playback can be paused if the media supports pausing and if it is currently playing.
    
    @return true if pausing playback can be paused, false otherwise.
    @see CanPlay, Pause
  **/
  @:thisConst @:final public function CanPause() : Bool;
  
  /**
    Checks whether media playback can be started right now.
    
    @return true if playback can be started, false otherwise.
    @see CanPause, Play
  **/
  @:thisConst @:final public function CanPlay() : Bool;
  
  /**
    Close the currently open media, if any.
    
    @see OnMediaClosed, Open, Pause, Play
  **/
  @:final public function Close() : Void;
  
  /**
    Gets the media's duration.
    
    @return A time span representing the duration.
    @see GetTime, Seek
  **/
  @:thisConst @:final public function GetDuration() : unreal.FTimespan;
  
  /**
    Gets the media's current playback rate.
    
    @return The playback rate.
    @see SetRate, SupportsRate
  **/
  @:thisConst @:final public function GetRate() : unreal.Float32;
  
  /**
    Gets the media's current playback time.
    
    @return Playback time.
    @see GetDuration, Seek
  **/
  @:thisConst @:final public function GetTime() : unreal.FTimespan;
  
  /**
    Gets the URL of the currently loaded media, if any.
    
    @return Media URL, or empty string if no media was loaded.
    @see OpenUrl
  **/
  @:thisConst @:final public function GetUrl() : unreal.FString;
  
  /**
    Checks whether playback is looping.
    
    @return true if looping, false otherwise.
    @see SetLooping
  **/
  @:thisConst @:final public function IsLooping() : Bool;
  
  /**
    Checks whether playback is currently paused.
    
    @return true if playback is paused, false otherwise.
    @see CanPause, IsPlaying, IsReady, Pause
  **/
  @:thisConst @:final public function IsPaused() : Bool;
  
  /**
    Checks whether playback has started.
    
    @return true if playback has started, false otherwise.
    @see CanPlay, IsPaused, IsReady, Play
  **/
  @:thisConst @:final public function IsPlaying() : Bool;
  
  /**
    Checks whether media is ready for playback.
    
    @return true if media is ready, false otherwise.
    @see IsPaused, IsPlaying, Stop
  **/
  @:thisConst @:final public function IsReady() : Bool;
  
  /**
    Opens the specified media URL.
    
    @param NewUrl The URL to open.
    @return true on success, false otherwise.
    @see GetUrl, Close
  **/
  @:final public function OpenUrl(NewUrl : unreal.FString) : Bool;
  
  /**
    Pauses media playback.
    
    This is the same as setting the playback rate to 0.0.
    
    @return true if playback is being paused, false otherwise.
    @see CanPause, Close, Play, Rewind, Seek, SetRate
  **/
  @:final public function Pause() : Bool;
  
  /**
    Starts media playback.
    
    This is the same as setting the playback rate to 1.0.
    
    @return true if playback is starting, false otherwise.
    @see CanPlay, Close, Pause, Rewind, Seek, SetRate
  **/
  @:final public function Play() : Bool;
  
  /**
    Rewinds the media to the beginning.
    
    This is the same as seeking to zero time.
    
    @return true if rewinding, false otherwise.
    @see GetTime, Close, Pause, Play, Seek
  **/
  @:final public function Rewind() : Bool;
  
  /**
    Seeks to the specified playback time.
    
    @param InTime The playback time to set.
    @return true on success, false otherwise.
    @see GetTime, Rewind
  **/
  @:final public function Seek(InTime : unreal.Const<unreal.PRef<unreal.FTimespan>>) : Bool;
  
  /**
    Enables or disables playback looping.
    
    @param Looping Whether playback should be looped.
    @return true on success, false otherwise.
    @see IsLooping
  **/
  @:final public function SetLooping(InLooping : Bool) : Bool;
  
  /**
    Changes the media's playback rate.
    
    @param Rate The playback rate to set.
    @return true on success, false otherwise.
    @see GetRate, SupportsRate
  **/
  @:final public function SetRate(Rate : unreal.Float32) : Bool;
  
  /**
    Checks whether the specified playback rate is supported.
    
    @param Rate The playback rate to check.
    @param Unthinned Whether no frames should be dropped at the given rate.
    @see SupportsScrubbing, SupportsSeeking
  **/
  @:thisConst @:final public function SupportsRate(Rate : unreal.Float32, Unthinned : Bool) : Bool;
  
  /**
    Checks whether the currently loaded media supports scrubbing.
    
    @return true if scrubbing is supported, false otherwise.
    @see SupportsRate, SupportsSeeking
  **/
  @:thisConst @:final public function SupportsScrubbing() : Bool;
  
  /**
    Checks whether the currently loaded media can jump to a certain position.
    
    @return true if seeking is supported, false otherwise.
    @see SupportsRate, SupportsScrubbing
  **/
  @:thisConst @:final public function SupportsSeeking() : Bool;
  
  /**
    The path or URL to the media file to be played.
  **/
  private var URL : unreal.FString;
  
}
