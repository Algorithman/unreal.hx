/**
   * 
   * WARNING! This file was autogenerated by: 
   *  _   _ _____     ___   _   _ __   __ 
   * | | | |  ___|   /   | | | | |\ \ / / 
   * | | | | |__    / /| | | |_| | \ V /  
   * | | | |  __|  / /_| | |  _  | /   \  
   * | |_| | |___  \___  | | | | |/ /^\ \ 
   *  \___/\____/      |_/ \_| |_/\/   \/ 
   * 
   * This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
   * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.mididevice;

@:glueCppIncludes("MIDIDeviceManager.h")
@:uextern extern class UMIDIDeviceManager extends unreal.UBlueprintFunctionLibrary {
  
  /**
    Enumerates all of the connected MIDI devices and reports back with the IDs and names of those devices.  This operation is a little expensive
    so only do it once at startup, or if you think that a new device may have been connected.
    
    @param
  **/
  static public function FindMIDIDevices(OutMIDIDevices : unreal.PRef<unreal.TArray<unreal.mididevice.FFoundMIDIDevice>>) : Void;
  
  /**
    Creates an instance of a MIDI device controller that can be used to interact with a connected MIDI device
    
    @param       DeviceID                The ID of the MIDI device you want to talk to.  Call "Find MIDI Devices" to enumerate the available devices.
    @param       MIDIBufferSize  How large the buffer size (in number of MIDI events) should be for incoming MIDI data.  Larger values can incur higher latency costs for incoming events, but don't set it too low or you'll miss events and your stuff will sound bad.
    
    @return      If everything goes okay, a valid MIDI device controller object will be returned.  If anything goes wrong, a null reference will be returned.
  **/
  static public function CreateMIDIDeviceController(DeviceID : unreal.Int32, MIDIBufferSize : unreal.Int32) : unreal.mididevice.UMIDIDeviceController;
  
}
