/**
   * 
   * WARNING! This file was autogenerated by: 
   *  _   _ _____     ___   _   _ __   __ 
   * | | | |  ___|   /   | | | | |\ \ / / 
   * | | | | |__    / /| | | |_| | \ V /  
   * | | | |  __|  / /_| | |  _  | /   \  
   * | |_| | |___  \___  | | | | |/ /^\ \ 
   *  \___/\____/      |_/ \_| |_/\/   \/ 
   * 
   * This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
   * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.mididevice;

@:glueCppIncludes("MIDIDeviceController.h", "MIDIDeviceManager.h")
@:uextern extern class FFoundMIDIDevice {
  
  /**
    True if this is the default MIDI device for output on this system
  **/
  public var bIsDefaultOutputDevice : Bool;
  
  /**
    True if this is the default MIDI device for input on this system
  **/
  public var bIsDefaultInputDevice : Bool;
  
  /**
    Whether the device is already in use.  You might not want to create a controller for devices that are busy.  Someone else could be using it.
  **/
  public var bIsAlreadyInUse : Bool;
  
  /**
    True if the device supports receiving events from us
  **/
  public var bCanSendTo : Bool;
  
  /**
    True if the device supports sending events to us
  **/
  public var bCanReceiveFrom : Bool;
  
  /**
    The name of this device.  This name comes from the MIDI hardware, any might not be unique
  **/
  public var DeviceName : unreal.FString;
  
  /**
    The unique ID of this MIDI device
  **/
  public var DeviceID : unreal.Int32;
  
}
