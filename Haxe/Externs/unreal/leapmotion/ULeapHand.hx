/**
   * 
   * WARNING! This file was autogenerated by: 
   *  _   _ _____     ___   _   _ __   __ 
   * | | | |  ___|   /   | | | | |\ \ / / 
   * | | | | |__    / /| | | |_| | \ V /  
   * | | | |  __|  / /_| | |  _  | /   \  
   * | |_| | |___  \___  | | | | |/ /^\ \ 
   *  \___/\____/      |_/ \_| |_/\/   \/ 
   * 
   * This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
   * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.leapmotion;


/**
  The Hand class reports the physical characteristics of a detected hand.
  Hand tracking data includes a palm position and velocity; vectors for
  the palm normal and direction to the fingers; properties of a sphere
  fit to the hand; and lists of the attached fingers.
  
  Leap API reference: https://developer.leapmotion.com/documentation/cpp/api/Leap.Hand.html
**/
@:glueCppIncludes("LeapHand.h")
@:uextern extern class ULeapHand extends unreal.UObject {
  
  /**
    The position of the wrist of this hand.
  **/
  public var WristPosition : unreal.FVector;
  
  /**
    The duration of time this Hand has been visible to the Leap Motion Controller.
  **/
  public var TimeVisible : unreal.Float32;
  
  /**
    The stabilized palm position of this Hand.
  **/
  public var StabilizedPalmPosition : unreal.FVector;
  
  /**
    The radius of a sphere fit to the curvature of this hand. This sphere is placed roughly as
    if the hand were holding a ball.
  **/
  public var SphereRadius : unreal.Float32;
  
  /**
    The center of a sphere fit to the curvature of this hand. This sphere is placed roughly as
    if the hand were holding a ball.
  **/
  public var SphereCenter : unreal.FVector;
  
  /**
    The holding strength of a pinch hand pose. The strength is zero for an open hand,
    and blends to 1.0 when a pinching hand pose is recognized. Pinching can be done
    between the thumb and any other finger of the same hand.
  **/
  public var PinchStrength : unreal.Float32;
  
  /**
    The estimated width of the palm when the hand is in a flat position.
  **/
  public var PalmWidth : unreal.Float32;
  
  /**
    The rate of change of the palm position in centimeters/second.
  **/
  public var PalmVelocity : unreal.FVector;
  
  /**
    The center position of the palm in centimeters from the Leap Motion Controller origin.
  **/
  public var PalmPosition : unreal.FVector;
  
  /**
    Custom API, Origin is a flat palm facing down.
  **/
  public var PalmOrientation : unreal.FRotator;
  
  /**
    The normal vector to the palm. If your hand is flat, this vector will point downward,
    or ?out? of the front surface of your palm.
  **/
  public var PalmNormal : unreal.FVector;
  
  /**
    Reports whether this is a valid Hand object.
  **/
  public var IsValid : Bool;
  
  /**
    Whether this is a right hand.
  **/
  public var IsRight : Bool;
  
  /**
    Identifies whether this Hand is a left hand.
  **/
  public var IsLeft : Bool;
  
  /**
    * A unique ID assigned to this Hand object, whose value remains the same across consecutive
    * frames while the tracked hand remains visible.
  **/
  public var Id : unreal.Int32;
  
  /**
    Identifies whether this hand is Left, Right, or Unknown
  **/
  public var HandType : unreal.leapmotion.LeapHandType;
  
  /**
    The strength of a grab hand pose as a float value in the [0..1] range representing
    the holding strength of the pose.
  **/
  public var GrabStrength : unreal.Float32;
  
  /**
    The direction from the palm position toward the fingers.
  **/
  public var Direction : unreal.FVector;
  
  /**
    How confident we are with a given hand pose.
    The confidence level ranges between 0.0 and 1.0 inclusive.
  **/
  public var Confidence : unreal.Float32;
  
  /**
    The orientation of the hand as a basis matrix.
  **/
  public var Basis : unreal.FMatrix;
  
  /**
    The arm to which this hand is attached.
  **/
  public var Arm : unreal.leapmotion.ULeapArm;
  
  /**
    The list of Finger objects detected in this frame that are attached to this hand,
    given in order from thumb to pinky.
    
    @return       The FingerList containing all Finger objects attached to this hand.
  **/
  @:final public function Fingers() : unreal.leapmotion.ULeapFingerList;
  
  /**
    The Frame associated with this Hand.
    
    @return       The associated Frame object, if available; otherwise, an invalid Frame object is returned.
  **/
  @:final public function Frame() : unreal.leapmotion.ULeapFrame;
  
  /**
    The angle of rotation around the rotation axis derived from the change in orientation
    of this hand, and any associated fingers, between the current frame and the specified frame.
    
    @param        OtherFrame      The starting frame for computing the relative rotation.
    @return       A positive value representing the heuristically determined rotational change of the hand between the current frame and that specified in the sinceFrame parameter.
  **/
  @:final public function RotationAngle(OtherFrame : unreal.leapmotion.ULeapFrame) : unreal.Float32;
  
  /**
    The angle of rotation around the specified axis derived from the change in orientation
    of this hand, and any associated fingers, between the current frame and the specified frame.
    
    @param        OtherFrame      The starting frame for computing the relative rotation.
    @param        Axis            The axis to measure rotation around.
    @return       A value representing the heuristically determined rotational change of the hand between the current frame and that specified in the sinceFrame parameter around the specified axis.
  **/
  @:final public function RotationAngleWithAxis(OtherFrame : unreal.leapmotion.ULeapFrame, Axis : unreal.Const<unreal.PRef<unreal.FVector>>) : unreal.Float32;
  
  /**
    The axis of rotation derived from the change in orientation of this hand, and any associated
    fingers, between the current frame and the specified frame.
    
    @param        OtherFrame      The starting frame for computing the relative rotation.
    @return       A normalized direction Vector representing the heuristically determined axis of rotational change of the hand between the current frame and that specified in the sinceFrame parameter.
  **/
  @:final public function RotationAxis(OtherFrame : unreal.Const<unreal.leapmotion.ULeapFrame>) : unreal.FVector;
  
  /**
    The transform matrix expressing the rotation derived from the change in orientation of this
    hand, and any associated fingers, between the current frame and the specified frame.
    
    @param        OtherFrame      The starting frame for computing the relative rotation.
    @return       A transformation Matrix representing the heuristically determined rotational change of the hand between the current frame and that specified in the sinceFrame parameter.
  **/
  @:final public function RotationMatrix(OtherFrame : unreal.Const<unreal.leapmotion.ULeapFrame>) : unreal.FMatrix;
  
  /**
    The estimated probability that the hand motion between the current frame and the specified
    frame is intended to be a rotating motion.
    
    @param        OtherFrame      The starting frame for computing the relative rotation.
    @return       A value between 0 and 1 representing the estimated probability that the hand motion between the current frame and the specified frame is intended to be a rotating motion.
  **/
  @:final public function RotationProbability(OtherFrame : unreal.Const<unreal.leapmotion.ULeapFrame>) : unreal.Float32;
  
  /**
    The scale factor derived from this hand?s motion between the current frame and the specified frame.
    
    @param        OtherFrame      The starting frame for computing the relative scaling.
    @return       A positive value representing the heuristically determined scaling change ratio of the hand between the current frame and that specified in the sinceFrame parameter.
  **/
  @:final public function ScaleFactor(OtherFrame : unreal.Const<unreal.leapmotion.ULeapFrame>) : unreal.Float32;
  
  /**
    The estimated probability that the hand motion between the current frame and the specified
    frame is intended to be a scaling motion.
    
    @param        OtherFrame      The starting frame for computing the relative scaling.
    @return       A value between 0 and 1 representing the estimated probability that the hand motion between the current frame and the specified frame is intended to be a scaling motion.
  **/
  @:final public function ScaleProbability(OtherFrame : unreal.Const<unreal.leapmotion.ULeapFrame>) : unreal.Float32;
  
  /**
    The change of position of this hand between the current frame and the specified frame.
    
    @param        OtherFrame      The starting frame for computing the translation.
    @return       A Vector representing the heuristically determined change in hand position between the current frame and that specified in the sinceFrame parameter.
  **/
  @:final public function Translation(OtherFrame : unreal.Const<unreal.leapmotion.ULeapFrame>) : unreal.FVector;
  
  /**
    The estimated probability that the hand motion between the current frame and the specified
    frame is intended to be a translating motion.
    
    @param        OtherFrame      The starting frame for computing the translation.
    @return       A value between 0 and 1 representing the estimated probability that the hand motion between the current frame and the specified frame is intended to be a translating motion.
  **/
  @:final public function TranslationProbability(OtherFrame : unreal.Const<unreal.leapmotion.ULeapFrame>) : unreal.Float32;
  
}
