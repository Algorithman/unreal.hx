/**
   * 
   * WARNING! This file was autogenerated by: 
   *  _   _ _____     ___   _   _ __   __ 
   * | | | |  ___|   /   | | | | |\ \ / / 
   * | | | | |__    / /| | | |_| | \ V /  
   * | | | |  __|  / /_| | |  _  | /   \  
   * | |_| | |___  \___  | | | | |/ /^\ \ 
   *  \___/\____/      |_/ \_| |_/\/   \/ 
   * 
   * This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
   * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.leapmotion;


/**
  The Pointable class reports the physical characteristics of a detected finger or tool.
  
  Leap API reference: https://developer.leapmotion.com/documentation/cpp/api/Leap.Pointable.html
**/
@:glueCppIncludes("LeapPointable.h")
@:uextern extern class ULeapPointable extends unreal.UObject {
  
  /**
    The estimated width of the finger or tool in centimeters.
  **/
  public var Width : unreal.Float32;
  
  /**
    The current touch zone of this Pointable object.
  **/
  public var TouchZone : unreal.leapmotion.LeapZone;
  
  /**
    A value proportional to the distance between this Pointable object and the
    adaptive touch plane.
  **/
  public var TouchDistance : unreal.Float32;
  
  /**
    The rate of change of the tip position in centimeters/second.
  **/
  public var TipVelocity : unreal.FVector;
  
  /**
    The tip position in centimeters from the Leap Motion origin.
  **/
  public var TipPosition : unreal.FVector;
  
  /**
    The duration of time this Pointable has been visible to the Leap Motion Controller.
  **/
  public var TimeVisible : unreal.Float32;
  
  /**
    The stabilized tip position of this Pointable.
  **/
  public var StabilizedTipPosition : unreal.FVector;
  
  /**
    The estimated length of the finger or tool in centimeters.
  **/
  public var Length : unreal.Float32;
  
  /**
    Reports whether this is a valid Pointable object.
  **/
  public var IsValid : Bool;
  
  /**
    Whether or not this Pointable is classified as a tool.
  **/
  public var IsTool : Bool;
  
  /**
    Whether or not this Pointable is classified as a finger.
  **/
  public var IsFinger : Bool;
  
  /**
    Whether or not this Pointable is in an extended posture.
  **/
  public var IsExtended : Bool;
  
  /**
    A unique ID assigned to this Pointable object, whose value remains the same
    across consecutive frames while the tracked finger or tool remains visible.
  **/
  public var Id : unreal.Int32;
  
  /**
    The direction in which this finger or tool is pointing. The direction is
    expressed as a unit vector pointing in the same direction as the tip.
  **/
  public var Direction : unreal.FVector;
  
  /**
    The Frame associated with this Pointable object.
    
    @return       The associated Frame object, if available; otherwise, an invalid Frame object is returned.
  **/
  public function Frame() : unreal.leapmotion.ULeapFrame;
  
  /**
    The Hand associated with a finger.
    
    @return       The associated Hand object, if available; otherwise, an invalid Hand object is returned.
  **/
  public function Hand() : unreal.leapmotion.ULeapHand;
  
  /**
    Compare Pointable object equality.
    
    @param        Other   pointable to compare to.
    @return       True if equal.
  **/
  public function Equal(Other : unreal.Const<unreal.leapmotion.ULeapPointable>) : Bool;
  
  /**
    Compare Pointable object inequality.
    
    @param        Other   pointable to compare to.
    @return       True if different.
  **/
  public function Different(Other : unreal.Const<unreal.leapmotion.ULeapPointable>) : Bool;
  
}
