/**
   * 
   * WARNING! This file was autogenerated by: 
   *  _   _ _____     ___   _   _ __   __ 
   * | | | |  ___|   /   | | | | |\ \ / / 
   * | | | | |__    / /| | | |_| | \ V /  
   * | | | |  __|  / /_| | |  _  | /   \  
   * | |_| | |___  \___  | | | | |/ /^\ \ 
   *  \___/\____/      |_/ \_| |_/\/   \/ 
   * 
   * This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
   * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.leapmotion;


/**
  The Frame class represents a set of hand and finger tracking data detected
  in a single frame.
  
  The Leap Motion software detects hands, fingers and tools within the tracking
  area, reporting their positions, orientations, gestures, and motions in frames
  at the Leap Motion frame rate.
  
  Leap API reference: https://developer.leapmotion.com/documentation/cpp/api/Leap.Frame.html
**/
@:glueCppIncludes("LeapFrame.h")
@:uextern extern class ULeapFrame extends unreal.UObject {
  
  /**
    Whether this Frame instance is valid.
  **/
  public var IsValid : Bool;
  public var CurrentFPS : unreal.Float32;
  
  /**
    The Finger object with the specified ID in this frame.
    
    @param        Id The ID value of a Finger object from a previous frame.
    @return       The Finger object with the matching ID if one exists in this frame; otherwise, an invalid Finger object is returned.
  **/
  @:final public function Finger(Id : unreal.Int32) : unreal.leapmotion.ULeapFinger;
  
  /**
    The list of Finger objects detected in this frame, given in arbitrary order.
    
    @return       The FingerList containing all Finger objects detected in this frame.
  **/
  @:final public function Fingers() : unreal.leapmotion.ULeapFingerList;
  
  /**
    The Gesture object with the specified ID in this frame.
    
    @param                Id The ID of an Gesture object from a previous frame.
    @return The Gesture object in the frame with the specified ID if one exists; Otherwise, an Invalid Gesture object.
  **/
  @:final public function Gesture(Id : unreal.Int32) : unreal.leapmotion.ULeapGesture;
  
  /**
    The gestures recognized or continuing in this frame.
    
    @return the list of gestures.
  **/
  @:final public function Gestures() : unreal.leapmotion.ULeapGestureList;
  
  /**
    Returns a GestureList containing all gestures that have occurred since the specified frame.
    
    @param                Frame An earlier Frame object. The starting frame must still be in the frame history cache, which has a default length of 60 frames.
    @return GestureList The list of the Gesture objects that have occurred since the specified frame.
  **/
  @:final public function GesturesSinceFrame(frame : unreal.leapmotion.ULeapFrame) : unreal.leapmotion.ULeapGestureList;
  
  /**
    The Hand object with the specified ID in this frame.
    
    @param                Id The ID value of a Hand object from a previous frame.
    @return The Hand object with the matching ID if one exists in this frame; otherwise, an invalid Hand object is returned.
  **/
  @:final public function Hand(Id : unreal.Int32) : unreal.leapmotion.ULeapHand;
  
  /**
    The list of Hand objects detected in this frame, given in arbitrary order.
    
    @return The HandList containing all Hand objects detected in this frame.
  **/
  @:final public function Hands() : unreal.leapmotion.ULeapHandList;
  
  /**
    The list of images from the Leap Motion cameras.
    
    @return An ImageList object containing the camera images analyzed to create this Frame.
  **/
  @:final public function Images() : unreal.leapmotion.ULeapImageList;
  
  /**
    The current InteractionBox for the frame.
    
    @return The current InteractionBox object.
  **/
  @:final public function InteractionBox() : unreal.leapmotion.ULeapInteractionBox;
  
  /**
    The Pointable object with the specified ID in this frame.
    
    @param                Id The ID value of a Pointable object from a previous frame.
    @return The Pointable object with the matching ID if one exists in this frame; otherwise, an invalid Pointable object is returned.
  **/
  @:final public function Pointable(Id : unreal.Int32) : unreal.leapmotion.ULeapPointable;
  
  /**
    The list of Pointable objects (fingers and tools) detected in this frame, given in arbitrary order.
    
    @return The PointableList containing all Pointable objects detected in this frame.
  **/
  @:final public function Pointables() : unreal.leapmotion.ULeapPointableList;
  
  /**
    The angle of rotation around the rotation axis derived from the overall rotational motion between the current frame and the specified frame.
    
    @param Frame  The starting frame for computing the relative rotation.
    @return A positive value containing the heuristically determined rotational change between the current frame and that specified in the sinceFrame parameter.
  **/
  @:final public function RotationAngle(Frame : unreal.leapmotion.ULeapFrame) : unreal.Float32;
  
  /**
    The angle of rotation around the specified axis derived from the overall rotational motion between the current frame and the specified frame.
    
    @param Frame  The starting frame for computing the relative rotation.
    @param Axis   The axis to measure rotation around.
    @return A value containing the heuristically determined rotational change between the current frame and that specified in the sinceFrame parameter around the given axis.
  **/
  @:final public function RotationAngleAroundAxis(Frame : unreal.leapmotion.ULeapFrame, Axis : unreal.FVector) : unreal.Float32;
  
  /**
    The axis of rotation derived from the overall rotational motion between the current frame and the specified frame.
    
    @param Frame  The starting frame for computing the relative rotation.
    @return A normalized direction Vector representing the axis of the heuristically determined rotational change between the current frame and that specified in the sinceFrame parameter.
  **/
  @:final public function RotationAxis(Frame : unreal.leapmotion.ULeapFrame) : unreal.FVector;
  
  /**
    The estimated probability that the overall motion between the current frame and the specified frame is intended to be a rotating motion.
    
    @param Frame  The starting frame for computing the relative rotation.
    @return A value between 0 and 1 representing the estimated probability that the overall motion between the current frame and the specified frame is intended to be a rotating motion.
  **/
  @:final public function RotationProbability(Frame : unreal.leapmotion.ULeapFrame) : unreal.Float32;
  
  /**
    The scale factor derived from the overall motion between the current frame and the specified frame.
    
    @param Frame  The starting frame for computing the relative scaling.
    @return A positive value representing the heuristically determined scaling change ratio between the current frame and that specified in the sinceFrame parameter.
  **/
  @:final public function ScaleFactor(Frame : unreal.leapmotion.ULeapFrame) : unreal.Float32;
  
  /**
    The estimated probability that the overall motion between the current frame and the specified frame is intended to be a scaling motion.
    
    @param Frame  The starting frame for computing the relative scaling.
    @return A value between 0 and 1 representing the estimated probability that the overall motion between the current frame and the specified frame is intended to be a scaling motion.
  **/
  @:final public function ScaleProbability(Frame : unreal.leapmotion.ULeapFrame) : unreal.Float32;
  
  /**
    The Tool object with the specified ID in this frame.
    
    @param Id             The ID value of a Tool object from a previous frame.
    @return The Tool object with the matching ID if one exists in this frame; otherwise, an invalid Tool object is returned.
  **/
  @:final public function Tool(Id : unreal.Int32) : unreal.leapmotion.ULeapTool;
  
  /**
    The list of Tool objects detected in this frame, given in arbitrary order.
    
    @return The ToolList containing all Tool objects detected in this frame.
  **/
  @:final public function Tools() : unreal.leapmotion.ULeapToolList;
  
  /**
    The change of position derived from the overall linear motion between the current frame and the specified frame.
    
    @param Frame  The starting frame for computing the relative translation.
    @return A Vector representing the heuristically determined change in position of all objects between the current frame and that specified in the frame parameter.
  **/
  @:final public function Translation(Frame : unreal.leapmotion.ULeapFrame) : unreal.FVector;
  
  /**
    The estimated probability that the overall motion between the current frame and the specified frame is intended to be a translating motion.
    
    @param Frame  The starting frame for computing the translation.
    @return A value between 0 and 1 representing the estimated probability that the overall motion between the current frame and the specified frame is intended to be a translating motion.
  **/
  @:final public function TranslationProbability(Frame : unreal.leapmotion.ULeapFrame) : unreal.Float32;
  
}
