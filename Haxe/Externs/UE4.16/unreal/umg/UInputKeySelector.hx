/**
   * 
   * WARNING! This file was autogenerated by: 
   *  _   _ _   _ __   __ 
   * | | | | | | |\ \ / / 
   * | | | | |_| | \ V /  
   * | | | |  _  | /   \  
   * | |_| | | | |/ /^\ \ 
   *  \___/\_| |_/\/   \/ 
   * 
   * This file was autogenerated by UE4HaxeExternGenerator using UHT definitions. It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
   * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.umg;


/**
  A widget for selecting a single key or a single key with a modifier.
**/
@:umodule("UMG")
@:glueCppIncludes("UMG.h")
@:uextern @:uclass extern class UInputKeySelector extends unreal.umg.UWidget {
  
  /**
    input chord representing the selected key, if false modifier keys are ignored.
  **/
  @:uproperty public var bAllowModifierKeys : Bool;
  
  /**
    Sets the text which is displayed while selecting keys.
  **/
  @:uproperty public var KeySelectionText : unreal.FText;
  
  /**
    The color of the text used to display the currently selected key.
  **/
  @:uproperty public var ColorAndOpacity : unreal.FLinearColor;
  
  /**
    The amount of blank space around the text used to display the currently selected key.
  **/
  @:uproperty public var Margin : unreal.slatecore.FMargin;
  
  /**
    The font used to display the currently selected key.
  **/
  @:uproperty public var Font : unreal.slatecore.FSlateFontInfo;
  
  /**
    The currently selected key chord.
  **/
  @:uproperty public var SelectedKey : unreal.slate.FInputChord;
  
  /**
    Sets the currently selected key.
  **/
  @:ufunction @:final public function SetSelectedKey(InSelectedKey : unreal.slate.FInputChord) : Void;
  
  /**
    Sets the text which is displayed while selecting keys.
  **/
  @:ufunction @:final public function SetKeySelectionText(InKeySelectionText : unreal.FText) : Void;
  
  /**
    Sets whether or not modifier keys are allowed in the selected key.
  **/
  @:ufunction @:final public function SetAllowModifierKeys(bInAllowModifierKeys : Bool) : Void;
  
  /**
    Returns true if the widget is currently selecting a key, otherwise returns false.
  **/
  @:ufunction @:thisConst @:final public function GetIsSelectingKey() : Bool;
  
}
