/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.audiomixer;

@:umodule("AudioMixer")
@:glueCppIncludes("Components/SynthComponent.h")
@:uextern @:uclass extern class USynthComponent extends unreal.USceneComponent {
  
  /**
    Starts the synth generating audio.
  **/
  @:ufunction @:final public function Start() : Void;
  
  /**
    Stops the synth generating audio.
  **/
  @:ufunction @:final public function Stop() : Void;
  
  /**
    Returns true if this component is currently playing.
  **/
  @:ufunction @:thisConst @:final public function IsPlaying() : Bool;
  
  /**
    Sets how much audio the sound should send to the given submix.
  **/
  @:ufunction @:final public function SetSubmixSend(Submix : unreal.USoundSubmix, SendLevel : unreal.Float32) : Void;
  
  /**
    An array of submix sends. Audio from this sound will send a portion of its audio to these effects.
  **/
  @:uproperty public var SoundSubmixSends : unreal.TArray<unreal.FSoundSubmixSendInfo>;
  
  /**
    Submix this sound belongs to
  **/
  @:uproperty public var SoundSubmix : unreal.USoundSubmix;
  
  /**
    The default send level to the master rerverb.
  **/
  @:uproperty public var DefaultMasterReverbSendAmount : unreal.Float32;
  
  /**
    The source effect chain to use for this sound.
  **/
  @:uproperty public var SourceEffectChain : unreal.USoundEffectSourcePresetChain;
  
  /**
    Sound class this sound belongs to
  **/
  @:uproperty public var SoundClass : unreal.USoundClass;
  
  /**
    What sound concurrency to use for sounds generated by this audio component
  **/
  @:uproperty public var ConcurrencySettings : unreal.USoundConcurrency;
  
  /**
    If bOverrideSettings is true, the attenuation properties to use for sounds generated by this component
  **/
  @:uproperty public var AttenuationOverrides : unreal.FSoundAttenuationSettings;
  
  /**
    If bOverrideSettings is false, the asset to use to determine attenuation properties for sounds generated by this component
  **/
  @:uproperty public var AttenuationSettings : unreal.USoundAttenuation;
  
  /**
    Should the Attenuation Settings asset be used (false) or should the properties set directly on the component be used for attenuation properties
  **/
  @:uproperty public var bOverrideAttenuation : Bool;
  
  /**
    Is this audio component allowed to be spatialized?
  **/
  @:uproperty public var bAllowSpatialization : Bool;
  
  /**
    Stop sound when owner is destroyed
  **/
  @:uproperty public var bStopWhenOwnerDestroyed : Bool;
  
  /**
    Auto destroy this component on completion
  **/
  @:uproperty public var bAutoDestroy : Bool;
  
}
