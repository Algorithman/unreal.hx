/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  The settings for attenuating.
**/
@:glueCppIncludes("Classes/Sound/SoundAttenuation.h")
@:uextern @:ustruct extern class FSoundAttenuationSettings extends unreal.FBaseAttenuationSettings {
  
  /**
    The distance which defines the amount of reverb wet level defined in ReverbDistanceMax.
  **/
  @:uproperty public var ReverbDistanceMax : unreal.Float32;
  
  /**
    The distance which defines the amount of reverb wet level defined in ReverbWetLevelMin.
  **/
  @:uproperty public var ReverbDistanceMin : unreal.Float32;
  
  /**
    The amount to send to master reverb when sound is at ReverbDistanceMax from listener.
  **/
  @:uproperty public var ReverbWetLevelMax : unreal.Float32;
  
  /**
    The amount to send to master reverb when sound is ReverbDistanceMin from listener.
  **/
  @:uproperty public var ReverbWetLevelMin : unreal.Float32;
  
  /**
    Settings to use with reverb plugin.
  **/
  @:uproperty public var ReverbPluginSettings : unreal.UReverbPluginSourceSettingsBase;
  
  /**
    Settings to use with occlusion plugin.
  **/
  @:uproperty public var OcclusionPluginSettings : unreal.UOcclusionPluginSourceSettingsBase;
  
  /**
    The amount of time in seconds to interpolate to the target OcclusionLowPassFilterFrequency when a sound is occluded.
  **/
  @:uproperty public var OcclusionInterpolationTime : unreal.Float32;
  
  /**
    The amount of volume attenuation to apply to sounds which are occluded.
  **/
  @:uproperty public var OcclusionVolumeAttenuation : unreal.Float32;
  
  /**
    The low pass filter frequency (in hertz) to apply if the sound playing in this audio component is occluded. This will override the frequency set in LowPassFilterFrequency. A frequency of 0.0 is the device sample rate and will bypass the filter.
  **/
  @:uproperty public var OcclusionLowPassFilterFrequency : unreal.Float32;
  
  /**
    Which trace channel to use for audio occlusion checks.
  **/
  @:uproperty public var OcclusionTraceChannel : unreal.ECollisionChannel;
  
  /**
    Amount to attenuate sounds that are not in focus. Can be overridden at the sound-level.
  **/
  @:uproperty public var NonFocusVolumeAttenuation : unreal.Float32;
  
  /**
    Amount to attenuate sounds that are in focus. Can be overridden at the sound-level.
  **/
  @:uproperty public var FocusVolumeAttenuation : unreal.Float32;
  
  /**
    Amount to scale the priority of sounds that are not in-focus. Can be used to reduce the priority of sounds that are not in focus.
  **/
  @:uproperty public var NonFocusPriorityScale : unreal.Float32;
  
  /**
    Amount to scale the priority of sounds that are in focus. Can be used to boost the priority of sounds that are in focus.
  **/
  @:uproperty public var FocusPriorityScale : unreal.Float32;
  
  /**
    Amount to scale the distance calculation of sounds that are not in-focus. Can be used to make in-focus sounds appear to be closer or further away than they actually are.
  **/
  @:uproperty public var NonFocusDistanceScale : unreal.Float32;
  
  /**
    Amount to scale the distance calculation of sounds that are in-focus. Can be used to make in-focus sounds appear to be closer or further away than they actually are.
  **/
  @:uproperty public var FocusDistanceScale : unreal.Float32;
  
  /**
    Azimuth angle (in degrees) relative to the listener forward vector which defines the non-focus region of sounds. Sounds playing at an angle greater than this will be out of focus.
  **/
  @:uproperty public var NonFocusAzimuth : unreal.Float32;
  
  /**
    Azimuth angle (in degrees) relative to the listener forward vector which defines the focus region of sounds. Sounds playing at an angle less than this will be in focus.
  **/
  @:uproperty public var FocusAzimuth : unreal.Float32;
  
  /**
    The Frequency in hertz at which to set the LPF when the sound is at LPFRadiusMax.
  **/
  @:uproperty public var LPFFrequencyAtMax : unreal.Float32;
  
  /**
    The Frequency in hertz at which to set the LPF when the sound is at LPFRadiusMin. (defaults to bypass)
  **/
  @:uproperty public var LPFFrequencyAtMin : unreal.Float32;
  
  /**
    The range at which to apply the maximum amount of low pass filter.
  **/
  @:uproperty public var LPFRadiusMax : unreal.Float32;
  
  /**
    The range at which to start applying a low pass filter.
  **/
  @:uproperty public var LPFRadiusMin : unreal.Float32;
  @:deprecated @:uproperty public var RadiusMax_DEPRECATED : unreal.Float32;
  @:deprecated @:uproperty public var RadiusMin_DEPRECATED : unreal.Float32;
  
  /**
    Settings to use with occlusion plugin.
  **/
  @:uproperty public var SpatializationPluginSettings : unreal.USpatializationPluginSourceSettingsBase;
  
  /**
    Which spatialization algorithm to use if spatializing mono sources.
  **/
  @:uproperty public var SpatializationAlgorithm : unreal.ESoundSpatializationAlgorithm;
  
  /**
    The distance between left and right stereo channels when stereo assets spatialized.
  **/
  @:uproperty public var StereoSpread : unreal.Float32;
  
  /**
    At what distance we start treating the sound source as spatialized
  **/
  @:uproperty public var OmniRadius : unreal.Float32;
  @:deprecated @:uproperty public var DistanceType_DEPRECATED : unreal.ESoundDistanceCalc;
  
  /**
    Whether or not to enable complex geometry occlusion checks.
  **/
  @:uproperty public var bUseComplexCollisionForOcclusion : Bool;
  
  /**
    Whether or not to enable line-of-sight occlusion checking for the sound that plays in this audio component.
  **/
  @:uproperty public var bEnableOcclusion : Bool;
  
  /**
    Whether or not listener-focus calculations are enabled for this attenuation.
  **/
  @:uproperty public var bEnableListenerFocus : Bool;
  
  /**
    Enable attenuation via low pass filter.
  **/
  @:uproperty public var bAttenuateWithLPF : Bool;
  
  /**
    Enable the source to be positioned in 3D.
  **/
  @:uproperty public var bSpatialize : Bool;
  
  /**
    Enable attenuation via volume.
  **/
  @:uproperty public var bAttenuate : Bool;
  
}
