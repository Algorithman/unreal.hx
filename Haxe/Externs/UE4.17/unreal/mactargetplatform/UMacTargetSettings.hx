/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.mactargetplatform;

/**
  Implements the settings for the Mac target platform.
**/
@:umodule("MacTargetPlatform")
@:glueCppIncludes("MacTargetSettings.h")
@:uextern @:uclass extern class UMacTargetSettings extends unreal.UObject {
  
  /**
    The number of workers to use to compute source audio. Will only use up to the max number of sources. Will evenly divide sources to each source worker.
  **/
  @:uproperty public var AudioNumSourceWorkers : unreal.Int32;
  
  /**
    The max number of channels (voices) to limit for this platform. The max channels used will be the minimum of this value and the global audio quality settings. A value of 0 will not apply a platform channel count max.
  **/
  @:uproperty public var AudioMaxChannels : unreal.Int32;
  
  /**
    The number of buffers to keep enqueued. More buffers increases latency, but can compensate for variable compute availability in audio callbacks on some platforms.
  **/
  @:uproperty public var AudioNumBuffersToEnqueue : unreal.Int32;
  
  /**
    The amount of audio to compute each callback block. Lower values decrease latency but may increase CPU cost.
  **/
  @:uproperty public var AudioCallbackBufferFrameSize : unreal.Int32;
  
  /**
    Sample rate to run the audio mixer with.
  **/
  @:uproperty public var AudioSampleRate : unreal.Int32;
  
  /**
    The maximum supported Metal shader langauge version.
    This defines what features may be used and OS versions supported.
  **/
  @:uproperty public var MaxShaderLanguageVersion : unreal.UInt8;
  
  /**
    The collection of RHI's we want to support on this platform.
    This is not always the full list of RHI we can support.
  **/
  @:uproperty public var TargetedRHIs : unreal.TArray<unreal.FString>;
  
}
