import haxe.DynamicAccess;
import sys.FileSystem.*;
import sys.io.File;
using StringTools;

/**
  Packages all the generated .cs files in one or multiple Build.cs / Target.cs files
  so they can be added to the build tool assembly.
  This function is executed in macro context (--macro Package.main ... ) (see build.hxml)
 **/
class Package
{
  public static function main(srcDir:String, mappedFiles:Array<{ name:String, target:String }>)
  {
    var first = mappedFiles[0];
    if (first == null) throw 'Mapped files cannot be empty';
    var dst = File.write(first.target);
    dst.writeString('// Generated by Haxe\n#pragma warning disable\n');
    var hasCopied = false;

    var mappedFiles = [ for (m in mappedFiles) m.name => m.target ];

    function recurse(path:String, pack:String)
    {
      for (file in readDirectory(path))
      {
        var p2 = '$path/$file';
        if (isDirectory(p2))
        {
          recurse(p2, pack + file + '.');
        } else if (p2.endsWith('.cs')) {
          var name = pack + file.substr(0,-3);
          var target = mappedFiles[name];
          if (target != null)
            mappedFiles.remove(name);
          if (name != first.name && target != null)
          {
            File.copy(p2, target);
          } else {
            var file = File.read(p2, false);
            try
            {
              file.readLine(); // generated by haxe
              var ln = null;
              while(true)
              {
                var ln = file.readLine();
                if (ln.startsWith('using')) // -D no-root
                {
                  if (!hasCopied)
                  {
                    dst.writeString(ln + '\n');
                    hasCopied = true;
                  }
                } else if (ln.indexOf('#pragma warning') >= 0) {
                } else {
                  dst.writeString(ln);
                  dst.writeByte('\n'.code);
                }
              }
            }
            catch(e:haxe.io.Eof) {}
          }
        }
      }
    }

    recurse(srcDir, '');
    dst.close();

    var remaining = [ for (k in mappedFiles.keys()) k ];
    if (remaining.length > 0)
      throw 'The following mapped files weren\'t found: $remaining';
  }
}
